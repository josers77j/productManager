// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id    Int      @id @default(autoincrement())
  username   String   @unique
  email      String   @unique
  password   String
  created_at DateTime @default(now())

  roles UsersRoles[]  // Relaci贸n con tabla intermedia de roles
}

model Role {
  role_id    Int      @id @default(autoincrement())
  role_name  String   @unique
  description String?

  users  UsersRoles[]  // Relaci贸n con tabla intermedia de usuarios
  permissions RolesPermissions[]  // Relaci贸n con tabla intermedia de permisos
}

model Permission {
  permission_id Int    @id @default(autoincrement())
  permission_name String @unique
  description    String?

  roles RolesPermissions[]  // Relaci贸n con tabla intermedia de roles
}

model UsersRoles {
  user_id Int
  role_id Int

  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  role Role @relation(fields: [role_id], references: [role_id], onDelete: Cascade)

  @@id([user_id, role_id]) // Clave primaria compuesta
}

model RolesPermissions {
  role_id      Int
  permission_id Int

  role      Role      @relation(fields: [role_id], references: [role_id], onDelete: Cascade)
  permission Permission @relation(fields: [permission_id], references: [permission_id], onDelete: Cascade)

  @@id([role_id, permission_id])  // Clave primaria compuesta
}
