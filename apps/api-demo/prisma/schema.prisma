// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  name      String   @default("")
  lastName  String    @default("")
  email     String    @unique
  password  String
  createdAt DateTime?  
  deleteAt  DateTime?
  roleId    Int?     

  auditLogs auditLog[] // Relación uno a muchos con logs de auditoría

  role role? @relation(fields: [roleId], references: [id])
}

model role {
  id   Int    @id @default(autoincrement())
  name String @unique

  users       user[] // Relación uno a muchos con usuarios
  permissions rolePermission[] // Relación muchos a muchos con permisos
}

model permission {
  id          Int     @id @default(autoincrement())
  action      String
  description String?
  resourceId  Int

  resource resource         @relation(fields: [resourceId], references: [id])
  roles    rolePermission[] // Relación muchos a muchos con roles
}

model rolePermission {
  id           Int @id @default(autoincrement())
  roleId       Int
  permissionId Int

  role       role       @relation(fields: [roleId], references: [id])
  permission permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId]) // Clave compuesta para evitar duplicados
}

model resource {
  id          Int          @id @default(autoincrement())
  name        String
  route       String
  permissions permission[] // Relación uno a muchos con permisos
}

model auditLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  createdAt DateTime @default(now())

  user user @relation(fields: [userId], references: [id])
}
