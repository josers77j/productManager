// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int      @id @default(autoincrement())
  username   String   @unique
  email      String   @unique
  password   String
  createdAt DateTime @default(now())
  deleteAt DateTime?


  roles UsersRoles[]  // Relaci贸n con tabla intermedia de roles
}

model Role {
  roleId    Int      @id @default(autoincrement())
  roleName  String   @unique
  description String?

  users  UsersRoles[]  // Relaci贸n con tabla intermedia de usuarios
  permissions RolesPermissions[]  // Relaci贸n con tabla intermedia de permisos
}

model Permission {
  permissionId Int    @id @default(autoincrement())
  permissionName String @unique
  description    String?

  roles RolesPermissions[]  // Relaci贸n con tabla intermedia de roles
}

model UsersRoles {
  userId Int
  roleId Int

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [roleId], onDelete: Cascade)

  @@id([userId, roleId]) // Clave primaria compuesta
}

model RolesPermissions {
  roleId      Int
  permissionId Int

  role      Role      @relation(fields: [roleId], references: [roleId], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [permissionId], onDelete: Cascade)

  @@id([roleId, permissionId])  // Clave primaria compuesta
}
